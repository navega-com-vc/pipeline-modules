name: api-deploy-portal-stg

on:
  workflow_call:
    inputs:
      WORKING_DIRECTORY:
        type: string
      RUNS_ON:
        type: string
        default: ubuntu-latest

    secrets:
      ARTIFACTORY_NPM_REGISTRY:
        required: true
      ARTIFACTORY_AUTH:
        required: true
      ARTIFACTORY_EMAIL:
        required: true

      AWS_ACCESS_KEY_ID_STG:
        required: true
      AWS_SECRET_ACCESS_KEY_STG:
        required: true
      AWS_REGION_STG:
        required: true

      DATABASE_HOST_DEV:
        required: false
      DATABASE_USERNAME_DEV:
        required: false
      DATABASE_PASSWORD_DEV:
        required: false
      DATABASE_NAME_DEV:
        required: false

      NAVEGA_API_URL_STG:
        required: false

      DD_API_KEY:
        required: true
      LOG_LEVEL_STG:
        required: true
      ENV_STG:
        required: true

      DATABASE_DATA_SOURCE:
        required: false
      DATABASE_API_URL:
        required: false
      DATABASE_API_KEY:
        required: false

jobs:
  deploy-stg:
    if: github.ref == 'refs/heads/stg'
    runs-on: ${{ inputs.RUNS_ON }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    env:
      DATABASE_HOST: ${{secrets.DATABASE_HOST_DEV}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME_DEV}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD_DEV}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME_DEV}}

      NAVEGA_API_URL: ${{secrets.NAVEGA_API_URL_STG}}
      NAVEGA_PORTAL_API_URL: ${{secrets.NAVEGA_PORTAL_API_URL_STG}}

      SIMULATION_API_URL: ${{secrets.SIMULATION_API_URL_DEV}}

      SUBNET_APP_A: ${{secrets.SUBNET_APP_A_STG}}
      SUBNET_APP_B: ${{secrets.SUBNET_APP_B_STG}}
      SECURITY_GROUP_API: ${{secrets.SECURITY_GROUP_API_STG}}

      LOG_LEVEL: ${{secrets.LOG_LEVEL_STG}}
      DD_API_KEY: ${{secrets.DD_API_KEY}}
      ENV: ${{secrets.ENV_STG}}

      EMAIL_PROVIDER: ${{ secrets.EMAIL_PROVIDER_DEV }}
      EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME_DEV }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD_DEV }}

      DATABASE_DATA_SOURCE: ${{ secrets.DATABASE_DATA_SOURCE_DEV }}
      DATABASE_API_URL: ${{ secrets.DATABASE_API_URL_DEV }}
      DATABASE_API_KEY: ${{ secrets.DATABASE_API_KEY_DEV }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Setup Jfrog
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
        run: |
          npm config set registry ${{secrets.ARTIFACTORY_NPM_REGISTRY}}
          npm config set -- '//f3capital.jfrog.io/artifactory/api/npm/f3capital-npm/:_auth' "${{secrets.ARTIFACTORY_AUTH}}"
          npm config set -- 'email' "${{secrets.ARTIFACTORY_EMAIL}}"
          echo "always-auth=true" >> ~/.npmrc

      - name: Install & Build Libs
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
        run: |
          sh ../build-libs.sh

      - name: Install
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
        run: |
          # Install dependencies in the root directory
          if [ -f "package.json" ]; then
            yarn install
          fi

          # Install dependencies in subdirectories of 'layer'
          if [ -d "layer" ]; then
            for dir in layer/*/; do
              if [ -f "$dir/package.json" ]; then
                (cd "$dir" && yarn install)
              fi
            done
          fi

      - name: Staging Deploy
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
        run: |
          export VERSION=$(node -p "require('./package.json').version")
          export AWS_ACCESS_KEY_ID=${{secrets.AWS_ACCESS_KEY_ID_STG}}
          export AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY_STG}}
          export AWS_REGION=${{secrets.AWS_REGION_STG}}
          npm i -g serverless
          sls deploy --stage ${{secrets.ENV_STG}} --region $AWS_REGION
