name: quality-workflow-veracode-split

on:
  workflow_call:
    inputs:
      RUNS_ON:
        type: string
        default: ubuntu-latest
      CANCEL_IN_PROGRESS:
        type: boolean
        default: true
      SKIP_LINT:
        type: boolean
        default: false
      SKIP_AUDIT:
        type: boolean
        default: false
      SKIP_TESTS:
        type: boolean
        default: false
      CONTINUE_ON_SONARQUBE_ERROR:
        type: boolean
        default: false
      WORKING_DIRECTORY:
        type: string

env:
  DATABASE_NAME: ${{secrets.DATABASE_NAME_DEV}}
  DATABASE_HOST: ${{secrets.DATABASE_HOST_DEV}}
  DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME_DEV}}
  DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD_DEV}}

  KEYCLOAK_URL: ${{secrets.KEYCLOAK_URL_DEV}}
  KEYCLOAK_PASSWORD_ADMIN: ${{secrets.KEYCLOAK_PASSWORD_ADMIN_DEV}}
  KEYCLOAK_USERNAME_ADMIN: ${{secrets.KEYCLOAK_USERNAME_ADMIN_DEV}}
  KEYCLOAK_USERNAME_TEST: ${{secrets.KEYCLOAK_USERNAME_TEST}}
  KEYCLOAK_PASSWORD_TEST: ${{secrets.KEYCLOAK_PASSWORD_TEST}}
  KEYCLOAK_CLIENT_SECRET_TEST: ${{secrets.KEYCLOAK_CLIENT_SECRET_TEST}}

  ENV: ${{ secrets.ENV_DEV }}
  DD_ENV: ${{ secrets.ENV_DEV }}

jobs:
  install:
    if: ${{ !contains(fromJson('["dev", "stg", "sbx", "main"]'), github.head_ref) }}
    runs-on: ${{ inputs.RUNS_ON }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: ${{ inputs.CANCEL_IN_PROGRESS }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}

      # Comprime os arquivos do repositório para análise de segurança
      - name: Compress files for security analysis
        uses: thedoctor0/zip-release@master
        with:
          filename: 'securityAnalysis.zip'
          path: .

      - name: Upload security analysis files
        uses: actions/upload-artifact@v3
        with:
          name: securityAnalysis
          path: securityAnalysis.zip

      - name: Install
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
        run: |
          npm config set registry ${{secrets.ARTIFACTORY_NPM_REGISTRY}}
          npm config set -- '_auth' "${{secrets.ARTIFACTORY_AUTH}}"
          npm config set -- 'email' "${{secrets.ARTIFACTORY_EMAIL}}"
          echo "always-auth=true" >> ~/.npmrc
          yarn install

      # Comprime o projeto executável
      - name: Compress runnable project
        run: |
          touch ${{ github.head_ref }}.tar.gz
          tar --exclude=${{ github.head_ref }}.tar.gz -czf ${{ github.head_ref }}.tar.gz .

      - name: Upload compressed project
        uses: actions/upload-artifact@v3
        with:
          name: ${{ github.head_ref }}
          path: ${{ github.head_ref }}.tar.gz

  quality:
    runs-on: ${{ inputs.RUNS_ON }}
    needs: install
    steps:
      - name: Download compressed project
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.head_ref }}

      - name: Extract project
        run: tar -xzf ${{ github.head_ref }}.tar.gz .

      - name: Lint
        if: ${{ !inputs.SKIP_LINT }}
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
        run: |
          yarn lint

      - name: Audit
        if: ${{ !inputs.SKIP_AUDIT }}
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
        run: |
          yarn audit --groups dependencies

      - name: Tests
        if: ${{ !inputs.SKIP_TESTS }}
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
        run: |
          yarn test

      - name: Sonarqube
        continue-on-error: ${{ inputs.CONTINUE_ON_SONARQUBE_ERROR }}
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
        run: |
          yarn sonar -Dsonar.host.url=${{ secrets.SQ_URL }} -Dsonar.login='${{ secrets.SQ_LOGIN }}' -Dsonar.sourceEncoding=UTF-8

  runSCA:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Download compressed project
        uses: actions/download-artifact@v3
        with:
          name: ${{ github.head_ref }}

      - name: Extract project
        run: tar -xzf ${{ github.head_ref }}.tar.gz .

      - name: Run SCA analysis
        env:
          # TODO: VC_SCA_TOKEN
          SRCCLR_API_TOKEN: ${{ secrets.SCA }}
        run: |
          curl -sSL 'https://download.sourceclear.com/ci.sh' | bash -s – scan --update-advisor --pull-request --allow-dirty

  runAndUploadSAST:
    runs-on: ubuntu-latest
    if: ${{ contains(fromJson('["dev", "stg", "sbx", "main"]'), github.head_ref) }}
    needs: install
    steps:
      - name: Download security analysis package
        uses: actions/download-artifact@v3
        with:
          name: securityAnalysis

      - name: Upload and Run SAST in Sandbox
        if: ${{ github.ref != 'refs/heads/main' }}
        uses: veracode/veracode-uploadandscan-action@master
        env:
          # TODO: VC_ID
          VeracodeID: ${{ secrets.VeracodeID }}
          # TODO: VC_KEY
          VeracodeKey: ${{ secrets.VeracodeKey }}
          AppName: ${{ github.repository }}
        with:
          vid: '$VeracodeID'
          vkey: '$VeracodeKey'
          criticality: 'VeryHigh'
          appname: '$AppName'
          createsandbox: true
          sandboxname: ${GITHUB_REF#refs/heads/}
          filepath: 'securityAnalysis.zip'
          deleteIncompleteScan: false
          version: ${{ github.run_id }}

      - name: Upload and Run SAST in Production
        if: ${{ github.ref == 'refs/heads/main' }}
        uses: veracode/veracode-uploadandscan-action@master # Faz a analise da Veracode
        env:
          # TODO: VC_ID
          VeracodeID: ${{ secrets.VeracodeID }}
          # TODO: VC_KEY
          VeracodeKey: ${{ secrets.VeracodeKey }}
          AppName: ${{ github.repository }}
        with:
          vid: '$VeracodeID'
          vkey: '$VeracodeKey'
          criticality: 'VeryHigh'
          appname: '$AppName'
          filepath: 'securityAnalysis.zip'
          deleteIncompleteScan: false
          version: ${{ github.run_id }}

  runSAST:
    runs-on: ubuntu-latest
    needs: install
    steps:
      - name: Download security analysis package
        uses: actions/download-artifact@v3
        with:
          name: securityAnalysis

      - name: Veracode Pipeline Scan
        # Integração com a aba security
        # continue-on-error: true
        env:
          # TODO: VC_ID
          VeracodeID: ${{ secrets.VeracodeID }}
          # TODO: VC_KEY
          VeracodeKey: ${{ secrets.VeracodeKey }}
          path: './securityAnalysis.zip'
        run: |
          curl -sSO https://downloads.veracode.com/securityscan/pipeline-scan-LATEST.zip
          unzip pipeline-scan-LATEST.zip
          java -jar pipeline-scan.jar -vid $VID -vkey $VKEY -f $path --issue_details true
      # Integração com a aba Security do Github - Avaliar se usaremos isso no futuro
      # - name: Converte para o formato SARIF
      #   id: convert
      #   uses: Veracode/veracode-pipeline-scan-results-to-sarif@v1.0.5
      #   with:
      #     pipeline-results-json: results.json
      #     output-results-sarif: veracode-results.sarif
      #     finding-rule-level: "3:1:0"
      # - name: Publica os resultados
      #   uses: github/codeql-action/upload-sarif@v2
      #   with: # Path to SARIF file relative to the root of the repository
      #     sarif_file: veracode-results.sarif
