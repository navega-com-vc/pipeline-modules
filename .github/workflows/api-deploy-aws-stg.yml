name: api-deploy-stg

on:
  workflow_call:
    inputs:
      WORKING_DIRECTORY:
        type: string
      RUNS_ON:
        type: string
        default: ubuntu-latest
    secrets:
      ARTIFACTORY_AUTH:
        required: true
      AWS_SECRET_ACCESS_KEY_STG:
        required: true
      DATABASE_PASSWORD_DEV:
        required: false
      DD_API_KEY:
        required: true
      KEYCLOAK_PASSWORD_ADMIN_DEV:
        required: false
      EMAIL_PASSWORD_DEV:
        required: false
      MFA_KEY_STG:
        required: false
      NAVEGA_API_REPORT_PASSWORD:
        required: false
jobs:
  deploy-stg:
    if: github.ref == 'refs/heads/stg'
    runs-on: ${{ inputs.RUNS_ON }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    env:
      DATABASE_HOST: ${{vars.DATABASE_HOST_DEV}}
      DATABASE_USERNAME: ${{vars.DATABASE_USERNAME_DEV}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD_DEV}}
      DATABASE_NAME: ${{vars.DATABASE_NAME_DEV}}

      DATABASE_DATA_SOURCE: ${{ vars.DATABASE_DATA_SOURCE_DEV }}
      DATABASE_API_URL: ${{ vars.DATABASE_API_URL }}
      DATABASE_API_KEY: ${{ secrets.DATABASE_API_KEY_DEV }}

      KEYCLOAK_URL: ${{vars.KEYCLOAK_URL_DEV}}
      KEYCLOAK_USERNAME_ADMIN: ${{vars.KEYCLOAK_USERNAME_ADMIN_DEV}}
      KEYCLOAK_PASSWORD_ADMIN: ${{secrets.KEYCLOAK_PASSWORD_ADMIN_DEV}}

      SUBNET_APP_A: ${{vars.SUBNET_APP_A_STG}}
      SUBNET_APP_B: ${{vars.SUBNET_APP_B_STG}}
      SECURITY_GROUP_API: ${{vars.SECURITY_GROUP_API_STG}}

      NAVEGA_API_URL: ${{vars.NAVEGA_API_URL_STG}}

      LOG_LEVEL: ${{vars.LOG_LEVEL_STG}}
      DD_API_KEY: ${{secrets.DD_API_KEY}}
      ENV: ${{vars.ENV_STG}}

      AWS_DYNAMODB_REGION: ${{vars.AWS_REGION_STG}}
      AWS_DYNAMODB_VERSION: ${{vars.AWS_DYNAMODB_VERSION_STG}}
      AWS_DYNAMODB_MIRRORED_DOCUMENTS_TABLE: ${{vars.AWS_DYNAMODB_MIRRORED_DOCUMENTS_TABLE_STG}}

      EMAIL_PROVIDER: ${{ vars.EMAIL_PROVIDER_DEV }}
      EMAIL_USERNAME: ${{ vars.EMAIL_USERNAME_DEV }}
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD_DEV }}

      EMAIL_REDIRECT_ADDRESS: ${{ secrets.EMAIL_REDIRECT_ADDRESS }}

      USE_WRITE_COMMAND_WITH_QUEUE: ${{ vars.USE_WRITE_COMMAND_WITH_QUEUE_STG }}
      WRITE_COMMAND_MESSAGE_BATCH_SIZE: ${{ vars.WRITE_COMMAND_MESSAGE_BATCH_SIZE_STG }}

      USE_ATLAS_API_REQUEST: ${{ vars.USE_ATLAS_API_REQUEST }}

      MAX_OUTPUT_DATA_SIZE_IN_MB: ${{ vars.MAX_OUTPUT_DATA_SIZE_IN_MB }}
      RULES_API_MAX_OUTPUT_DATA_SIZE_IN_MB: ${{ vars.RULES_API_MAX_OUTPUT_DATA_SIZE_IN_MB }}
      TIMEOUT_TASK_EXECUTION_IN_SECONDS: ${{ vars.TIMEOUT_TASK_EXECUTION_IN_SECONDS}}
      FREE_MEMORY_LIMIT_IN_MB: ${{ vars.FREE_MEMORY_LIMIT_IN_MB}}

      CF_DISTRIBUTION_NAVEGA: ${{ vars.CF_DISTRIBUTION_NAVEGA_STG }}
      INTEGRATION_API_URL: ${{ vars.INTEGRATION_API_URL_STG }}

      MFA_KEY: ${{ secrets.MFA_KEY_STG }}

      NAVEGA_API_REPORT_USERNAME: ${{ vars.NAVEGA_API_REPORT_USERNAME }}
      NAVEGA_API_REPORT_PASSWORD: ${{ secrets.NAVEGA_API_REPORT_PASSWORD }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.17.0

      - name: Install
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
        run: |
          npm config set registry ${{vars.ARTIFACTORY_NPM_REGISTRY}}
          npm config set -- '//f3capital.jfrog.io/artifactory/api/npm/f3capital-npm/:_auth' "${{secrets.ARTIFACTORY_AUTH}}"
          npm config set -- 'email' "${{vars.ARTIFACTORY_EMAIL}}"
          echo "always-auth=true" >> ~/.npmrc
          
          # Install dependencies in the root directory
          if [ -f "package.json" ]; then
            yarn install
          fi

          # Install dependencies in subdirectories of 'layer'
          if [ -d "layer" ]; then
            for dir in layer/*/; do
              if [ -f "$dir/package.json" ]; then
                (cd "$dir" && yarn install)
              fi
            done
          fi

      - name: Staging Deploy
        working-directory: ${{ inputs.WORKING_DIRECTORY }}
        run: |
          export VERSION=$(node -p "require('./package.json').version")
          export AWS_ACCESS_KEY_ID=${{vars.AWS_ACCESS_KEY_ID_STG}}
          export AWS_SECRET_ACCESS_KEY=${{secrets.AWS_SECRET_ACCESS_KEY_STG}}
          export AWS_REGION=${{vars.AWS_REGION_STG}}
          npm i -g serverless@3
          sls deploy --stage ${{vars.ENV_STG}} --region $AWS_REGION
